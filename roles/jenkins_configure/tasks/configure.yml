- name: run Jenkins global config
  jenkins_script: >-
    {{ jenkins_use_auth | combine({"script": item.script}) }}
  register: script_output
  failed_when: >-
    ('output' in script_output and 'Exception' in script_output.output )
    or
    ( script_output.msg is defined and (
      '500' in script_output.msg or
      '401' in script_output.msg or
      '403' in script_output.msg or
      '404' in script_output.msg or
      'HTTP Error' in script_output.msg
    ) )
  changed_when: "(script_output.output|default('')).find('CHANGED') != -1"
  # Since the jenkins_script module doesn't support check_mode, we disable it
  # here so that we can handle check mode inside of the Groovy scripts.
  check_mode: false
  with_items:
    - script: >-
        {{ lookup('template', role_path +
        '/templates/jenkins_root_url.groovy') }}
    - script: >-
        {{ lookup('template', role_path + '/templates/enable_csrf.groovy') }}
    - script: >-
        {{ lookup('template', role_path + '/templates/set_slaveport.groovy') }}
    - script: >-
        {{ lookup('template', role_path + '/templates/user.groovy') }}
    - script: >-
        {{ lookup('template', role_path + '/templates/setenvvars.groovy') }}
    - script: >-
        {{ lookup('template', role_path +
        '/templates/jenkins_root_url.groovy') }}
      when: "{{ jenkins_configure_security_enabled }}"
    - script: >-
        {{ lookup('template', role_path +
        '/templates/roles_and_ldap_auth.groovy') }}
      when: "{{ jenkins_configure_security_enabled }}"
    # This option will disable security, rather than avoid touching it when
    # jenkins_configure_security_enabled is false
    - script: >-
        {{ lookup('template', role_path +
        '/templates/basic_security.groovy') }}
      when: "{{ not jenkins_configure_security_enabled }}"
  become: true
  become_user: "{{ jenkins_user }}"
  # The "when" clause on a task gets evaluated separately for each element in
  # an item list. Some of the elements in our list should not always be run
  # while others should. So this logic will run any elements that are in the
  # with_items without any attached conditionasl, but will evaluate the separate
  # "when" clause attached to each item if one is given. This allows individual
  # scripts to have their own script logic for when they should be executed
  when: (item.when is not defined or item.when) | bool
  tags:
    - skip_ansible_lint
    - jenkins_check_mode

- include_tasks: ensure_up.yml

- block:
    - name: read Jenkins user SSH pubkey
      become: true
      slurp:
        src: "{{ jenkins_home }}/.ssh/id_rsa.pub"
      register: pubkey

    - name: configure Jenkins user as CLI user
      become: true
      jenkins_cli_user:
        jenkins_home: "{{ jenkins_home }}"
        jenkins_user: "{{ jenkins_configure_admin.name }}"
        key: "{{ pubkey['content'] | b64decode | trim }}"
      notify: restart Jenkins
      tags:
        - skip_ansible_lint

    - name: configure user as CLI user
      jenkins_cli_user:
        jenkins_home: "{{ jenkins_home }}"
        jenkins_user: "{{ item.name }}"
        key_file: "{{ item.key }}"
      become: true
      notify: restart Jenkins
      with_items: "{{ jenkins_configure_cli_users }}"
      tags:
        - skip_ansible_lint
  rescue:
    - name: Don't Panic
      debug:
        msg: >-
          No SSH key found for the Jenkins user. No need to panic, it just
          means that user won't be granted Jenkins CLI access

